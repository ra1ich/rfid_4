def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    namespace "com.example.rfid.driver"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/java'
         main {jniLibs.srcDirs 'libs'}
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.rfid.driver"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 21 //flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        // ndk {
        //     moduleName "jni_rfid_driver"

        //     ldLibs "log", "z", "m"

        //     abiFilters "armeabi-v7a", "x86", "x86_64", "arm64-v8a"

        // }
    }

    buildTypes {

     
        //  release {
        //      ndk {
        //              abiFilters "armeabi",  "arm64-v8a", "armeabi-v7a", "x86", "x86_64"
        //          }
        //      // TODO: Add your own signing config for the release build.
        //      // Signing with the debug keys for now, so `flutter run --release` works.
        //      signingConfig signingConfigs.debug
        //  }

        //  debug {
        //          ndk { //Here to add, otherwise the debug package will be a problem, the last three are optional, x86 recommended to add or part of the simulator returns error
        //              abiFilters "armeabi",  "armeabi-v7a" , "arm64-v8a" , "x86", "x86_64"
        //          }
        //      }
    }

    // externalNativeBuild {
    //     cmake {
    //         path "src/main/jniLibs/CMakeLists.txt"
    //         version "3.22.1"
    //     }
    // }
}


flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation fileTree(include: '*.aar', dir: 'libs')
    implementation fileTree(include: '*.jar', dir: 'libs')

}
